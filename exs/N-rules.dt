module ℕ


axiom foo : ∀ o : Foo(o)

axiom id : ∀ i : Id(i, i)


syntax Empty

syntax ℕ  = Zero    --  Zero : ℕ
          | Suc(ℕ)  --  Suc  : ℕ -> ℕ



syntax 𝔹  = 𝕋 | 𝔽




judgment bool = 𝔹Test(𝔹)

rule true-test :  |
                  |----------- true-test
                  | 𝔹Test(𝕋)

rule false-test : |
                  |----------- false-test
                  | 𝔹Test(𝔽)



judgment nat-test = NT(ℕ)

rule schema s-test for all objects (n : ℕ) :
|
|---------------------------------------- s-test
| NT(n)




judgment sum = Sum(ℕ, ℕ, ℕ)

rule schema sum-zero for all objects (n : ℕ) :
|
|-------------------------------------- sum-zero
| Sum(Zero, n, n)


rule schema sum-suc for all objects (m : ℕ), (n : ℕ), (o : ℕ) :
| Sum(m, n, o)
|-------------------------------------- sum-suc
| Sum(Suc(m), n, Suc(o))



theorem custom-rules : ∀ (n : ℕ) : Sum( Zero , n , n )
uni : | for any (n : ℕ)
      |-----------------------------------------------
      |
      | Sum( Zero, n , n )  by rule sum-zero

∀ (n : ℕ) : Sum( Zero , n , n )  by rule ∀-intro on uni


theorem custom-rules-1 : ∃ (n : ℕ) : Sum( Zero , Suc(Zero) , n )
a : Sum( Zero, Suc(Zero) , m )  by rule sum-zero
∃ (n : ℕ) : Sum( Zero , Suc(Zero) , n )  by rule ∃-intro on a


--  this should be rejected
--  but clearly, wasn't
--  TODO: FIX THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--  BUT IS IT REALLY WRONG? It seems that my intuition has failed me at first.
--  If `n` has unknown type that means that the ∀-elim or a custom rule
--  does not require it to have any specific type.
--  So we can just say "it was always ℕ".
--  So it seems ok that if passed.
theorem rejected-1 : ∃ (n : ℕ) : Foo(n)
a : Foo(n)  by rule ∀-elim on foo
r : ∃ (n : ℕ) : Foo(n)  by rule ∃-intro on a
--  so now it should mean that n has type ℕ
--  so I can't make it anything else
--  so I can't do this 
-- _ : ∃ (i : 𝕏) : Foo(i)  by rule ∃-intro on a --  it indeed, causes it to fail
∃ (n : ℕ) : Foo(n)  by rule repetition on r


--  this should work just fine
theorem just-fine : ∃ (n : ℕ) : Id(n, n)
b : Id(m, m)  by rule ∀-elim on id
∃ (n : ℕ) : Id(n, n)  by rule ∃-intro on b


--  this fails, but it kinda seems like it should be ok
--  TODO: figure it out
--  I think it could work. The tool would, however, have to do more work.
--  This is something like subsumption checking, I think.
--  And I have decided against it. Because it makes things more complicated for me.
--  Maybe in some future version.
-- theorem custom-rules-2 : ∃ n : Sum( Zero , Suc(Zero) , Suc(Zero) )
-- a : Sum( Zero, k, l )  by rule sum-zero
-- ∃ n : Sum( Zero , n , n )  by rule ∃-intro on a


theorem custom-rules-3 : Sum( Zero , Suc(Zero) , Suc(Zero) )
Sum( Zero, Suc(Zero) , n )  by rule sum-zero


-- theorem totality : ∀ ℕ₁ ℕ₂ : ∃ ℕ₃ : Sum( ℕ₁ , ℕ₂ , ℕ₃ )
-- |
-- |--------------------------------------------------------------------------------------------------
-- |
-- | --  Let's prove the base case: { ∀ ℕ₂ : ∃ ℕ₃ : Sum( Zero , ℕ₂ , ℕ₃ ) }
-- |
-- | uni-n2 :  | for all (ℕ2 : ℕ)
-- |           |--------------------------------------------------------------------------------------
-- |           |
-- |           | sz : Sum( Zero , n2 , n3 )  by rule sum-zero
-- |           | ∃ ℕ₃ : Sum( Zero , n2 , ℕ₃ )  by rule ∃-intro on sz
-- |
-- | base : { ∀ ℕ₂ : ∃ ℕ₃ : Sum( Zero , ℕ₂ , ℕ₃ ) }  by rule ∀-intro on uni-n2
-- |
-- |
-- |
-- | --  Let's prove the inductive case: [ ∀ ℕ : { ∀ ℕ₂ : ∃ ℕ₃ : Sum( ℕ , ℕ₂ , ℕ₃ ) } ==> { ∀ ℕ₂ : ∃ ℕ₃ : Sum( Suc(ℕ) , ℕ₂ , ℕ₃ ) } ]
-- |
-- | uni-n : | for all (n₁ : ℕ)
-- |         |----------------------------------------------------------------------------------------
-- |         |
-- |         | impl :  | p3 : ∀ ℕ₂ : ∃ ℕ₃ : Sum( ℕ , ℕ₂ , ℕ₃ )
-- |         |         |---------------------------------------------------------------------------------------------------------------------------------------
-- |         |         |
-- |         |         | uni-n2b : | for all (ℕ2 : ℕ)
-- |         |         |           |---------------------------------------------------------------------------------------------------------------------------
-- |         |         |           |  
-- |         |         |           | d1 : ∃ ℕ₃ : Sum( n₁ , ℕ2 , ℕ₃ )  by rule ∀-elim on p3
-- |         |         |           |
-- |         |         |           | exn3 :  | p5 : Sum( n₁ , ℕ2 , ℕ3 ) for some (ℕ3 : ℕ)
-- |         |         |           |         |---------------------------------------------------------------------------------------------------------
-- |         |         |           |         |
-- |         |         |           |         | sum-n1+1 : Sum( Suc(n₁) , ℕ2 , Suc(ℕ3) )  by rule sum-suc on ℕ, ℕ2, ℕ3
-- |         |         |           |         | ∃ ℕ₃ : Sum( Suc(ℕ) , ℕ2 , ℕ₃ )  by rule ∃-intro on sum-n1+1
-- |         |         |           |
-- |         |         |           | ∃ ℕ₃ : Sum( Suc(ℕ) , ℕ2 , ℕ₃ )  by rule ∃-elim on d1, exn3
-- |         |         |
-- |         |         | ∀ ℕ₂ : ∃ n₃ : ℕ(n₃) ∧ Sum( Suc(ℕ) , ℕ₂ , n₃ )  by rule ∀-intro on uni-n2b
-- |         |
-- |         | { ∀ ℕ₂ : ∃ ℕ₃ : Sum( ℕ , ℕ₂ , ℕ₃ ) } ==> { ∀ ℕ₂ : ∃ ℕ₃ : Sum( Suc(ℕ) , ℕ₂ , ℕ₃ ) }  by rule ==>-intro on impl
-- |
-- | step : [ ∀ ℕ : { ∀ ℕ₂ : ∃ ℕ₃ : Sum( ℕ , ℕ₂ , ℕ₃ ) } ==> { ∀ ℕ₂ : ∃ ℕ₃ : Sum( Suc(ℕ) , ℕ₂ , ℕ₃ ) } ]  by rule ∀-intro on uni-n
-- |
-- |
-- | -- Let's use the induction now.
-- | ∀ ℕ₁ ℕ₂ : ∃ ℕ₃ : Sum( ℕ₁ , ℕ₂ , ℕ₃ )  by induction on base, step




-- judgment schema conj for all propositions A, B = AND(A, B)
--
-- rule schema and-intro for all propositions A, B : | A
--                                                  | B
--                                                  |------------------- and-intro
--                                                  | AND(A, B)


-- judgment Even(Ν) :
-- rule even-z :
-- 
-- |
-- |-------------- even-z
-- | Even(Zero)
-- 
-- rule schema even-s for any object (n : ℕ) :
-- 
-- | Even(n)
-- |-------------------- even-s
-- | Even(Suc(Suc(n)))
-- 
-- 
-- theorem even? : Even(n1), Even(n2) ⊢ n1 + n2 = n3 ∧ Even(n3)
-- suc (suc n1') + n2 = suc n3'  where n3 = suc n3'
-- 
-- -> scitani
-- suc n1' + n2 = suc n3''  where n3' = suc n3''
-- 
-- -> scitani
-- n1' + n2 = n3''
-- 
-- --> induction : Even(n3'')
-- 
-- -> even-s na n3''
-- 
-- -- hotovo


theorem what-even : ⊤
1 : | for any (n : ℕ)
    |------------------
    |
    | NT(n)  by rule s-test

⊤  by rule ⊤-intro




theorem example-of-case-analysis-on-ℕ : ∀ (n : ℕ) : ⊤
1 : | for any (n : ℕ)
    |------------------------------------------------
    |
    | ⊤  by case analysis on n :
    |
    |       case Zero ->  |
    |                     |------------------------
    |                     |
    |                     | ⊤  by rule ⊤-intro
    |
    |       case Suc(m) ->  |
    |                       |----------------------
    |                       |
    |                       | ⊤  by rule ⊤-intro

∀ (n : ℕ) : ⊤  by rule ∀-intro on 1


theorem example-case-bool : ∀ (b : 𝔹) : 𝔹Test(b)
1 : | for any (b : 𝔹)
    |--------------------------------------------
    |
    | 𝔹Test(b)  by case analysis on b :
    |
    |               case 𝕋 -> |
    |                         |----------------------------
    |                         | 𝔹Test(b)  by rule true-test
    |
    |               case 𝔽 -> |
    |                         |----------------------------
    |                         | 𝔹Test(b)  by rule false-test

∀ (b : 𝔹) : 𝔹Test(b)  by rule ∀-intro on 1




--  proving anything from a contradiction
theorem prove-weird : ∀ (x : Empty) : Sum(Zero, Zero, Suc(Zero))
1 : | for any (p1 : Empty)
    |---------------------------------------------------------------
    |
    | Sum(Zero, Zero, Suc(Zero))  by case analysis on p1 :

∀ (x : Empty) : Sum(Zero, Zero, Suc(Zero))  by rule ∀-intro on 1



-- --  this should eventually generalize to the following:
-- theorem schema prove-anything for any proposition A : Empty ⊢ A
-- | p1 : Empty
-- |--------------------------------------------------------------------
-- |
-- | A  by case analysis on on p1



-- theorem prove-false : ∀ (n : ℕ) : ∃ (m : ℕ) : Sum( Suc(Zero) , m , n ) ⊢ ⊥
-- --  there's a counter-example: n = Zero -> Sum( Suc(Zero) , ? , Zero )
-- --  There's no number so that this holds.
-- | 1 : ∀ (n : ℕ) : ∃ (m : ℕ) : Sum( Suc(Zero) , m , n )
-- |--------------------------------------------------------------------
-- |
-- | 2 : ∃ (m : ℕ) : Sum( Suc(Zero) , m , Zero )  by rule ∀-intro on 1
-- |
-- | 3 : | 4 : Sum( Suc(Zero) , m1 , Zero )  for some (m1 : ℕ)
-- |     |--------------------------------------------------------------
-- |     |
-- |     | ⊥  by case analysis on 4
-- |
-- | ⊥  by rule ∃-elim on 2, 3


--  Can I do case analysis on an existential variable?
--  We don't know what it is. If we do case analysis and prove a thing
--  I guess it's ok. No matter what it actually is, we prove the same thing.
module ‚Ñï


axiom foo : ‚àÄ o : Foo(o)

axiom id : ‚àÄ i : Id(i, i)


syntax Empty

syntax ‚Ñï  = Zero    --  Zero : ‚Ñï
          | Suc(‚Ñï)  --  Suc  : ‚Ñï -> ‚Ñï



syntax ùîπ  = ùïã | ùîΩ




judgment bool = ùîπTest(ùîπ)

rule true-test :  |
                  |----------- true-test
                  | ùîπTest(ùïã)

rule false-test : |
                  |----------- false-test
                  | ùîπTest(ùîΩ)



judgment id = Id(‚Ñï, ‚Ñï)

rule schema id for any object (n : ‚Ñï) :
|
|----------- id
| Id(n, n)




judgment only-positive = ‚Ñôositive(‚Ñï)

rule schema pos for any object (n : ‚Ñï) :
|
|-------------- pos
| ‚Ñôos(Suc(n))


judgment nat-test = NT(‚Ñï)

rule schema s-test for all objects (n : ‚Ñï) :
|
|---------------------------------------- s-test
| NT(n)




judgment sum = Sum(‚Ñï, ‚Ñï, ‚Ñï)

rule schema sum-zero for all objects (n : ‚Ñï) :
|
|-------------------------------------- sum-zero
| Sum(Zero, n, n)


rule schema sum-suc for all objects (m : ‚Ñï), (n : ‚Ñï), (o : ‚Ñï) :
| Sum(m, n, o)
|-------------------------------------- sum-suc
| Sum(Suc(m), n, Suc(o))




theorem custom-rules : ‚àÄ (n : ‚Ñï) : Sum( Zero , n , n )
uni : | for any (n : ‚Ñï)
      |-----------------------------------------------
      |
      | Sum( Zero, n , n )  by rule sum-zero

‚àÄ (n : ‚Ñï) : Sum( Zero , n , n )  by rule ‚àÄ-intro on uni


theorem custom-rules-1 : ‚àÉ (n : ‚Ñï) : Sum( Zero , Suc(Zero) , n )
a : Sum( Zero, Suc(Zero) , m )  by rule sum-zero
‚àÉ (n : ‚Ñï) : Sum( Zero , Suc(Zero) , n )  by rule ‚àÉ-intro on a


--  this should be rejected
--  but clearly, wasn't
--  TODO: FIX THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--  BUT IS IT REALLY WRONG? It seems that my intuition has failed me at first.
--  If `n` has unknown type that means that the ‚àÄ-elim or a custom rule
--  does not require it to have any specific type.
--  So we can just say "it was always ‚Ñï".
--  So it seems ok that if passed.
theorem rejected-1 : ‚àÉ (n : ‚Ñï) : Foo(n)
a : Foo(n)  by rule ‚àÄ-elim on foo
r : ‚àÉ (n : ‚Ñï) : Foo(n)  by rule ‚àÉ-intro on a
--  so now it should mean that n has type ‚Ñï
--  so I can't make it anything else
--  so I can't do this 
-- _ : ‚àÉ (i : ùïè) : Foo(i)  by rule ‚àÉ-intro on a --  it indeed, causes it to fail
‚àÉ (n : ‚Ñï) : Foo(n)  by rule repetition on r


--  this should work just fine
theorem just-fine : ‚àÉ (n : ‚Ñï) : Id(n, n)
b : Id(m, m)  by rule ‚àÄ-elim on id
‚àÉ (n : ‚Ñï) : Id(n, n)  by rule ‚àÉ-intro on b


theorem custom-rules-3 : Sum( Zero , Suc(Zero) , Suc(Zero) )
Sum( Zero, Suc(Zero) , n )  by rule sum-zero



--  TODO: FIX FIX FIX THIS THIS THIS ONE ONE ONE !!! !!! !!!
-- theorem case-test-x : ‚àÄ (n : ‚Ñï) : ‚Ñôos(Suc(n))
-- u : | for any (N : ‚Ñï)
--     |-------------------------------------
--     | 
--     | _ : Id(Suc(N), 1)  by rule id
--     |
--     | --  1 should be unified with Suc(N) now
--     |
--     | ‚Ñôos(1)  by case analysis on 1 :
--     |               case Suc(m) ->  |
--     |                               |----------------------
--     |                               | ‚Ñôos(1)  by rule pos
--     |
-- 
-- ‚àÄ (n : ‚Ñï) : ‚Ñôos(Suc(n))  by rule ‚àÄ-intro on u




theorem total : ‚àÄ (n‚ÇÅ : ‚Ñï) (n‚ÇÇ : ‚Ñï) : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( n‚ÇÅ , n‚ÇÇ , n‚ÇÉ )
‚àÄ (n‚ÇÅ : ‚Ñï) (n‚ÇÇ : ‚Ñï) : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( n‚ÇÅ , n‚ÇÇ , n‚ÇÉ )  by induction :

  case Zero -> 
    |
    |--------------------------------------------------------------------------------------------
    | --  let's prove the base case
    | --  ‚àÄ (n‚ÇÇ : ‚Ñï) : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( Zero , n‚ÇÇ , n‚ÇÉ )
    |
    | uni-n2 :  | for all (n2 : ‚Ñï)
    |           |--------------------------------------------------------------------------------
    |           |
    |           | sz : Sum( Zero , n2 , n3 )  by rule sum-zero
    |           | ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( Zero , n2 , n‚ÇÉ )  by rule ‚àÉ-intro on sz
    |
    | result : ‚àÄ (n‚ÇÇ : ‚Ñï) : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( Zero , n‚ÇÇ , n‚ÇÉ )  by rule ‚àÄ-intro on uni-n2


  case Suc(m) ->  

    | induction-hypothesis : ‚àÄ (n‚ÇÇ : ‚Ñï) : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( m , n‚ÇÇ , n‚ÇÉ )
    |--------------------------------------------------------------------------------------------
    | --  let's prove the inductive case
    | --  { ‚àÄ (n‚ÇÇ : ‚Ñï) : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( m , n‚ÇÇ , n‚ÇÉ ) }
    | --    ==> { ‚àÄ (n‚ÇÇ : ‚Ñï) : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( Suc(m) , n‚ÇÇ , n‚ÇÉ ) }
    |
    | uni-n2b : | for all (N2 : ‚Ñï)
    |           |--------------------------------------------------------------------------------
    |           |  
    |           | d1 : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( m , N2 , n‚ÇÉ )  by rule ‚àÄ-elim on induction-hypothesis
    |           |
    |           | exn3 :  | p5 : Sum( m , N2 , n3 ) for some (n3 : ‚Ñï)
    |           |         |----------------------------------------------------------------------
    |           |         |
    |           |         | sum-m+1 : Sum( Suc(m) , N2 , Suc(n3) )  by rule sum-suc on p5
    |           |         | ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( Suc(m) , N2 , n‚ÇÉ )  by rule ‚àÉ-intro on sum-m+1
    |           |
    |           | ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( Suc(m) , N2 , n‚ÇÉ )  by rule ‚àÉ-elim on d1, exn3
    |
    | ‚àÄ (n‚ÇÇ : ‚Ñï) : ‚àÉ (n‚ÇÉ : ‚Ñï) : Sum( Suc(m) , n‚ÇÇ , n‚ÇÉ )  by rule ‚àÄ-intro on uni-n2b




-- theorem case-on-judgment : ‚àÄ (m : ‚Ñï) (n : ‚Ñï) (o : ‚Ñï) : Sum(Suc(m), n, Suc(o)) ==> Sum(m, n, o)
-- 1 : | for any (m : ‚Ñï)
--     |----------------------------------------------------------------
--     |
--     | 2 : | for any (n : ‚Ñï)
--     |     |----------------------------------------------------------
--     |     |
--     |     | 3 : | for any (o : ‚Ñï)
--     |     |     |----------------------------------------------------
--     |     |     |
--     |     |     | 4 : | d1 : Sum(Suc(m), n, Suc(o))
--     |     |     |     |----------------------------------------------
--     |     |     |     |
--     |     |     |     | Sum(m, n, o)  by case analysis on judgment d1 :
--     |     |     |     |
--     |     |     |     |                   case rule | get : Sum(M, N, O)
--     |     |     |     |                             |------------------------- sum-suc
--     |     |     |     |                             | have : Sum(Suc(N), N, Suc(O))
--     |     |     |     |
--     |     |     |     |
--     |     |     |     |
--     |     |     |     |
--     |     |     |     |
-- 
-- 
-- 

assume d1 : Sum( Suc(Suc(Zero)) , n , Suc(m) )

I do case analysis on it and have this case:

| get : Sum( Suc(Zero) , N , M )
|--------------------------------------------- sum-suc
| have : Sum( Suc(Suc(Zero)) , N , Suc(M) )


When I unify "have" with d1 I get this substitution:
n -> N
m -> M









| Sum(m, n, o)
|-------------------------------------- sum-suc
| Sum(Suc(m), n, Suc(o))


-- judgment schema conj for all propositions A, B = AND(A, B)
--
-- rule schema and-intro for all propositions A, B : | A
--                                                  | B
--                                                  |------------------- and-intro
--                                                  | AND(A, B)


judgment Even(Œù) :
rule even-z :

|
|-------------- even-z
| Even(Zero)

rule schema even-s for any object (n : ‚Ñï) :

| Even(n)
|-------------------- even-s
| Even(Suc(Suc(n)))


theorem even? : Even(n1), Even(n2) ‚ä¢ n1 + n2 = n3 ‚àß Even(n3)
suc (suc n1') + n2 = suc n3'  where n3 = suc n3'

-> scitani
suc n1' + n2 = suc n3''  where n3' = suc n3''

-> scitani
n1' + n2 = n3''

--> induction : Even(n3'')

-> even-s na n3''

-- hotovo


theorem what-even : ‚ä§
1 : | for any (n : ‚Ñï)
    |------------------
    |
    | NT(n)  by rule s-test

‚ä§  by rule ‚ä§-intro




theorem example-of-case-analysis-on-‚Ñï : ‚àÄ (n : ‚Ñï) : ‚ä§
1 : | for any (n : ‚Ñï)
    |------------------------------------------------
    |
    | ‚ä§  by case analysis on n :
    |
    |       case Zero ->  |
    |                     |------------------------
    |                     |
    |                     | ‚ä§  by rule ‚ä§-intro
    |
    |       case Suc(m) ->  |
    |                       |----------------------
    |                       |
    |                       | ‚ä§  by rule ‚ä§-intro

‚àÄ (n : ‚Ñï) : ‚ä§  by rule ‚àÄ-intro on 1


theorem example-case-bool : ‚àÄ (b : ùîπ) : ùîπTest(b)
1 : | for any (b : ùîπ)
    |--------------------------------------------
    |
    | ùîπTest(b)  by case analysis on b :
    |
    |               case ùïã -> |
    |                         |----------------------------
    |                         | ùîπTest(b)  by rule true-test
    |
    |               case ùîΩ -> |
    |                         |----------------------------
    |                         | ùîπTest(b)  by rule false-test

‚àÄ (b : ùîπ) : ùîπTest(b)  by rule ‚àÄ-intro on 1




--  proving anything from a contradiction
theorem prove-weird : ‚àÄ (x : Empty) : Sum(Zero, Zero, Suc(Zero))
1 : | for any (p1 : Empty)
    |---------------------------------------------------------------
    |
    | Sum(Zero, Zero, Suc(Zero))  by case analysis on p1 :

‚àÄ (x : Empty) : Sum(Zero, Zero, Suc(Zero))  by rule ‚àÄ-intro on 1



-- --  this should eventually generalize to the following:
-- theorem schema prove-anything for any proposition A : Empty ‚ä¢ A
-- | p1 : Empty
-- |--------------------------------------------------------------------
-- |
-- | A  by case analysis on on p1


-- --  now, the case analysis on judgments
-- therem case-judgments-1 : ‚àÉ (a : ‚Ñï) (b : ‚Ñï) : Sum(a, b, b) ‚ä¢ ?
-- | p1 : ‚àÉ (a : ‚Ñï) (b : ‚Ñï) : Sum(a, b, b)
-- |------------------------------------------------
-- |
-- | e : | p2 : Sum(A, B, B)  for some (A : ‚Ñï) (B : ‚Ñï)
-- |     |------------------------------------------
-- |     |
-- |     | ?  by case analysis on judgment p2 :
-- |     |
-- |     |       case rule |
-- |     |                 |------------------ sum-zero
-- |     |                 | Sum(Zero, B, B)
-- |     |
-- |     |             ->  |
-- |     |                 |----------------------------
-- |     |                 |
-- |     |                 |
-- |     |                 |
-- |     |                 |
-- |     |                 | ?  by ?
-- |     |
-- |     |
-- |     |       case rule | p3 : Sum(A', Suc(B'), B')
-- |     |                 |--------------------------------- sum-suc
-- |     |                 | Sum(Suc(A'), Suc(B'), Suc(B'))
-- |     |
-- |     |             ->  |
-- |     |                 |--------------------------
-- |     |                 |
-- |     |                 | ?  by case analysis on judgment p3 :  --  p3 is not matched by any of the two constructors
-- |
-- | ?  by rule ‚àÉ-elim on p1, e





-- theorem prove-false : ‚àÄ (n : ‚Ñï) : ‚àÉ (m : ‚Ñï) : Sum( Suc(Zero) , m , n ) ‚ä¢ ‚ä•
-- --  there's a counter-example: n = Zero -> Sum( Suc(Zero) , ? , Zero )
-- --  There's no number so that this holds.
-- | 1 : ‚àÄ (n : ‚Ñï) : ‚àÉ (m : ‚Ñï) : Sum( Suc(Zero) , m , n )
-- |--------------------------------------------------------------------
-- |
-- | 2 : ‚àÉ (m : ‚Ñï) : Sum( Suc(Zero) , m , Zero )  by rule ‚àÄ-elim on 1
-- |
-- | 3 : | 4 : Sum( Suc(Zero) , m1 , Zero )  for some (m1 : ‚Ñï)
-- |     |--------------------------------------------------------------
-- |     |
-- |     | ‚ä•  by case analysis on judgment 4 :
-- |
-- | ‚ä•  by rule ‚àÉ-elim on 2, 3

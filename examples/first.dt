--  This is not a theorem.
--  It is a theorem schema and the proof is actually a proof schema.
--  The syntax "for A, B" tells the engine that A and B are not actual propositions.
--  Instead, they are a "second-order" variables standing for some nullary propositions.
theorem schema modus-ponens for propositions A, B : A, A ==> B ⊢ B .
_ : | a: A
    | a->b: A ==> B
    |-----------------------------
    |
    | b: B  by ==>-elim on a->b, a
    |
    B by b


-- the final derivation can be named
theorem schema modus-ponens' for A, B :  A, A ==> B ⊢ B .
_ : | a: A
    | a->b: A ==> B
    |-----------------------------
    |
    | b: B  by ==>-elim on a->b, a
    |
    _ : B by b



theorem schema compose for A, B :  A ==> B, B ==> C ⊢ A ==> C .
_ : | a->b: A ==> B
    | b->c: B ==> C
    |-------------------------------------
    |
    | X : | a: A
    |     |-----------------------------
    |     | b: B  by ==>-elim on a->b, a
    |     | c: C  by ==>-elim on b->c, b
    |
    | a->c: A ==> C by ==>-intro on X, c
    A ==> C by a->c


-- alternatively, more concise
theorem schema compose' for A, B : A ==> B, B ==> C ⊢ A ==> C .
_ : | a->b: A ==> B
    | b->c: B ==> C
    |-------------------------------------
    |
    | _ : | a: A
    |     |-----------------------------
    |     | b: B  by ==>-elim on a->b, a
    |     | c: C  by ==>-elim on b->c, b
    |
-- the last sub-proof doesn't need to be named
-- the last sub-proof carries over


-- alternatively, maybe even without names
theorem schema compose'' for A, B :  A ==> B, B ==> C ⊢ A ==> C .
| a->b: A ==> B
| b->c: B ==> C
|-------------------------------
|
| | a: A
| |-----------------------------
| | b: B  by ==>-elim on a->b, a
| | c: C  by ==>-elim on b->c, b
|


-- there's also the question of whether to allow the following:
theorem schema compose''' for A, B, C : A ==> B, B ==> C ⊢ A ==> C .
| a->b: A ==> B
| b->c: B ==> C
|-------------------------------
|
  | a: A
  |-----------------------------
  | b: B  by ==>-elim on a->b, a
  | c: C  by ==>-elim on b->c, b

-- this would require a different approach
-- tracking a position of the last | character would tell us
-- whether we are still in the same scope or a new one or we've left some
-- in such a case it would make sense to strictly require that those pipes
-- make a straight line, always
-- this could totally work
